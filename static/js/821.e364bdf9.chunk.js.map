{"version":3,"file":"static/js/821.e364bdf9.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.js","components/ContactList/ContactList.js","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.js","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"ContactItem_contact__C4k7V\",\"deleteButton\":\"ContactItem_deleteButton__AvFnv\",\"contactItem\":\"ContactItem_contactItem__Z4FuP\"};","import { useDispatch } from 'react-redux';\n\nimport { deleteContact } from '../../redux/thunks';\nimport { Button } from '@mui/material';\nimport css from './ContactItem.module.css';\nimport { Typography } from '@mui/material';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nconst ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const defaultTheme = createTheme();\n  const handleDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <li className={css.contactItem}>\n      <ThemeProvider theme={defaultTheme}>\n        <Typography component=\"h3\" variant=\"h6\">\n          {name} : {number}\n        </Typography>\n      </ThemeProvider>\n      <Button\n        type=\"button\"\n        onClick={() => handleDeleteContact(id)}\n        variant=\"contained\"\n        // className={css.deleteButton}\n      >\n        Delete\n      </Button>\n    </li>\n  );\n};\nexport default ContactItem;\n","import { useSelector } from 'react-redux';\n\nimport ContactItem from 'components/ContactItem/ContactItem';\nimport { selectVisibleContacts } from 'redux/selectors';\n\nimport Container from '@mui/material/Container';\nimport Box from '@mui/material/Box';\n\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nconst ContactList = () => {\n  const filteredContacts = useSelector(selectVisibleContacts);\n  const defaultTheme = createTheme();\n  return (\n    <ThemeProvider theme={defaultTheme}>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <Box\n          sx={{\n            marginTop: 2,\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          <ul>\n            {filteredContacts &&\n              filteredContacts.map(({ id, name, number }) => (\n                <Box\n                  key={id}\n                  sx={{\n                    marginBottom: 1,\n                  }}\n                >\n                  <ContactItem name={name} number={number} id={id} />\n                </Box>\n              ))}\n          </ul>\n        </Box>\n      </Container>\n    </ThemeProvider>\n  );\n};\nexport default ContactList;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useSelector, useDispatch } from 'react-redux';\n\nimport { nanoid } from 'nanoid';\nimport { useState } from 'react';\nimport { selectContacts } from 'redux/selectors';\nimport { addContact } from 'redux/thunks';\n\nimport { Typography, TextField, Button } from '@mui/material';\n\nimport Container from '@mui/material/Container';\nimport Box from '@mui/material/Box';\nimport CssBaseline from '@mui/material/CssBaseline';\n\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContacts);\n  const defaultTheme = createTheme();\n  const dispatch = useDispatch();\n  const handleChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n  const nameId = nanoid();\n  const numberId = nanoid();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const isContactExists =\n      contacts.entities &&\n      contacts.entities.find(entity => entity.name === name);\n    if (isContactExists) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n\n    const newContact = {\n      createdAt: new Date().toISOString(),\n      name,\n      number,\n      id: nanoid(),\n    };\n    dispatch(addContact(newContact));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <ThemeProvider theme={defaultTheme}>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <Box\n          sx={{\n            marginTop: 4,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <Typography component=\"h1\" variant=\"h5\">\n            Phonebook\n          </Typography>\n          <Box\n            component=\"form\"\n            onSubmit={handleSubmit}\n            noValidate\n            sx={{ mt: 1 }}\n          >\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              label=\"Name\"\n              type=\"name\"\n              name=\"name\"\n              value={name}\n              id={nameId}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              onChange={handleChange}\n              variant=\"outlined\"\n            />\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              id={numberId}\n              label=\"Number\"\n              type=\"tel\"\n              name=\"number\"\n              value={number}\n              pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n              onChange={handleChange}\n              variant=\"outlined\"\n            />\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n            >\n              Add contacts\n            </Button>\n          </Box>\n        </Box>\n      </Container>\n    </ThemeProvider>\n  );\n};\nexport default ContactForm;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilterByName } from '../../redux/filterSlice';\n\nimport Container from '@mui/material/Container';\nimport Box from '@mui/material/Box';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { Typography, TextField } from '@mui/material';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nconst Filter = () => {\n  const filter = useSelector(state => state.filter.filter);\n\n  const dispatch = useDispatch();\n  const defaultTheme = createTheme();\n  const handleChange = event => {\n    const name = event.target.value;\n    dispatch(setFilterByName(name));\n  };\n  return (\n    <ThemeProvider theme={defaultTheme}>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <Box\n          sx={{\n            marginTop: 4,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <Typography component=\"h1\" variant=\"h5\">\n            Contacts\n          </Typography>\n\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            label=\"Find contacts by name\"\n            type=\"text\"\n            name=\"filter\"\n            value={filter}\n            onChange={handleChange}\n            variant=\"outlined\"\n          />\n        </Box>\n      </Container>\n    </ThemeProvider>\n  );\n};\nexport default Filter;\n","import ContactList from 'components/ContactList/ContactList';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport { useEffect } from 'react';\nimport Filter from 'components/Filter/Filter';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/thunks';\nimport { selectIsLoading, selectError } from 'redux/selectors';\nimport Container from '@mui/material/Container';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const defaultTheme = createTheme();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <ThemeProvider theme={defaultTheme}>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n\n        <ContactForm />\n        <Filter />\n        {isLoading && <CircularProgress />}\n\n        {error && <p>{error.message}</p>}\n        <ContactList />\n      </Container>\n    </ThemeProvider>\n  );\n};\nexport default ContactsPage;\n"],"names":["id","name","number","dispatch","useDispatch","defaultTheme","createTheme","className","css","ThemeProvider","theme","Typography","component","variant","Button","type","onClick","deleteContact","handleDeleteContact","filteredContacts","useSelector","selectVisibleContacts","Container","maxWidth","Box","sx","marginTop","display","flexDirection","map","marginBottom","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","useState","setName","setNumber","contacts","selectContacts","handleChange","event","target","value","nameId","numberId","CssBaseline","alignItems","onSubmit","preventDefault","entities","find","entity","alert","newContact","createdAt","Date","toISOString","addContact","noValidate","mt","TextField","margin","required","fullWidth","label","pattern","onChange","mb","filter","state","setFilterByName","isLoading","selectIsLoading","error","selectError","useEffect","fetchContacts","CircularProgress","message"],"sourceRoot":""}